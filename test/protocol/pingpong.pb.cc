// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pingpong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pingpong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Ball_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ball_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PingPongTesting_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pingpong_2eproto() {
  protobuf_AddDesc_pingpong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pingpong.proto");
  GOOGLE_CHECK(file != NULL);
  Ball_descriptor_ = file->message_type(0);
  static const int Ball_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, count_),
  };
  Ball_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ball_descriptor_,
      Ball::default_instance_,
      Ball_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ball));
  PingPongTesting_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pingpong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ball_descriptor_, &Ball::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pingpong_2eproto() {
  delete Ball::default_instance_;
  delete Ball_reflection_;
}

void protobuf_AddDesc_pingpong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016pingpong.proto\"(\n\004Ball\022\021\n\tclient_id\030\001 "
    "\002(\r\022\r\n\005count\030\002 \002(\0042+\n\017PingPongTesting\022\030\n"
    "\010PingPong\022\005.Ball\032\005.BallB\003\200\001\001", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pingpong.proto", &protobuf_RegisterTypes);
  Ball::default_instance_ = new Ball();
  Ball::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pingpong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pingpong_2eproto {
  StaticDescriptorInitializer_pingpong_2eproto() {
    protobuf_AddDesc_pingpong_2eproto();
  }
} static_descriptor_initializer_pingpong_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Ball::kClientIdFieldNumber;
const int Ball::kCountFieldNumber;
#endif  // !_MSC_VER

Ball::Ball()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ball)
}

void Ball::InitAsDefaultInstance() {
}

Ball::Ball(const Ball& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ball)
}

void Ball::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = 0u;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ball::~Ball() {
  // @@protoc_insertion_point(destructor:Ball)
  SharedDtor();
}

void Ball::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ball::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ball_descriptor_;
}

const Ball& Ball::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pingpong_2eproto();
  return *default_instance_;
}

Ball* Ball::default_instance_ = NULL;

Ball* Ball::New() const {
  return new Ball;
}

void Ball::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Ball*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, client_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ball)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint64 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ball)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ball)
  return false;
#undef DO_
}

void Ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ball)
  // required uint32 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_id(), output);
  }

  // required uint64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Ball)
}

::google::protobuf::uint8* Ball::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ball)
  // required uint32 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_id(), target);
  }

  // required uint64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ball)
  return target;
}

int Ball::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_id());
    }

    // required uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ball* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ball*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ball::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ball::Swap(Ball* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ball::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ball_descriptor_;
  metadata.reflection = Ball_reflection_;
  return metadata;
}


// ===================================================================

PingPongTesting::~PingPongTesting() {}

const ::google::protobuf::ServiceDescriptor* PingPongTesting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingPongTesting_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PingPongTesting::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingPongTesting_descriptor_;
}

void PingPongTesting::PingPong(::google::protobuf::RpcController* controller,
                         const ::Ball*,
                         ::Ball*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PingPong() not implemented.");
  done->Run();
}

void PingPongTesting::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PingPongTesting_descriptor_);
  switch(method->index()) {
    case 0:
      PingPong(controller,
             ::google::protobuf::down_cast<const ::Ball*>(request),
             ::google::protobuf::down_cast< ::Ball*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PingPongTesting::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Ball::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& PingPongTesting::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Ball::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

PingPongTesting_Stub::PingPongTesting_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PingPongTesting_Stub::PingPongTesting_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PingPongTesting_Stub::~PingPongTesting_Stub() {
  if (owns_channel_) delete channel_;
}

void PingPongTesting_Stub::PingPong(::google::protobuf::RpcController* controller,
                              const ::Ball* request,
                              ::Ball* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
